"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),function(app){app.registerModule("activities")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("articles"),function(app){app.registerModule("artsubmissions")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("chat"),function(app){app.registerModule("contactus")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("games")}(ApplicationConfiguration),function(app){app.registerModule("sponsors")}(ApplicationConfiguration),function(app){app.registerModule("teachers")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Activities",state:"activities",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","activities",{title:"List Activities",state:"activities.list"}),menuService.addSubMenuItem("topbar","activities",{title:"Create Activity",state:"activities.create",roles:["user"]})}angular.module("activities").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("activities",{"abstract":!0,url:"/activities",template:"<ui-view/>"}).state("activities.list",{url:"",templateUrl:"modules/activities/client/views/list-activities.client.view.html",controller:"ActivitiesListController",controllerAs:"vm",data:{pageTitle:"Activities List"}}).state("activities.create",{url:"/create",templateUrl:"modules/activities/client/views/form-activity.client.view.html",controller:"ActivitiesController",controllerAs:"vm",resolve:{activityResolve:newActivity},data:{roles:["user","admin"],pageTitle:"Activities Create"}}).state("activities.edit",{url:"/:activityId/edit",templateUrl:"modules/activities/client/views/form-activity.client.view.html",controller:"ActivitiesController",controllerAs:"vm",resolve:{activityResolve:getActivity},data:{roles:["user","admin"],pageTitle:"Edit Activity {{ activityResolve.name }}"}}).state("activities.view",{url:"/:activityId",templateUrl:"modules/activities/client/views/view-activity.client.view.html",controller:"ActivitiesController",controllerAs:"vm",resolve:{activityResolve:getActivity},data:{pageTitle:"Activity {{ activityResolve.name }}"}})}function getActivity($stateParams,ActivitiesService){return ActivitiesService.get({activityId:$stateParams.activityId}).$promise}function newActivity(ActivitiesService){return new ActivitiesService}angular.module("activities").config(routeConfig),routeConfig.$inject=["$stateProvider"],getActivity.$inject=["$stateParams","ActivitiesService"],newActivity.$inject=["ActivitiesService"]}(),function(){function ActivitiesController($scope,$state,$window,Authentication,activity){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.activity.$remove($state.go("activities.list"))}function save(isValid){function successCallback(res){$state.go("activities.view",{activityId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.activity._id?vm.activity.$update(successCallback,errorCallback):vm.activity.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.activityForm"),!1)}var vm=this;vm.authentication=Authentication,vm.activity=activity,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("activities").controller("ActivitiesController",ActivitiesController),ActivitiesController.$inject=["$scope","$state","$window","Authentication","activityResolve"]}(),function(){function ActivitiesListController(ActivitiesService){var vm=this;vm.activities=ActivitiesService.query()}angular.module("activities").controller("ActivitiesListController",ActivitiesListController),ActivitiesListController.$inject=["ActivitiesService"]}(),function(){function ActivitiesService($resource){return $resource("api/activities/:activityId",{activityId:"@_id"},{update:{method:"PUT"}})}angular.module("activities").factory("ActivitiesService",ActivitiesService),ActivitiesService.$inject=["$resource"]}(),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Articles",state:"articles",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","articles",{title:"List Articles",state:"articles.list"}),Menus.addSubMenuItem("topbar","articles",{title:"Create Articles",state:"articles.create",roles:["user"]}),Menus.addSubMenuItem("topbar","articles",{title:"Review Articles",state:"articles.reviewList",roles:["user","admin"]})}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/client/views/list-articles.client.view.html"}).state("articles.reviewList",{url:"/reviewList",templateUrl:"modules/articles/client/views/reviewList-article.client.view.html",data:{roles:["user","admin"]}}).state("articles.create",{url:"/create",templateUrl:"modules/articles/client/views/create-article.client.view.html",data:{roles:["user","admin"]}}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/client/views/view-article.client.view.html"}).state("articles.review",{url:"/:articleId/review",templateUrl:"modules/articles/client/views/review-article.client.view.html",data:{roles:["user","admin"]}}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/client/views/edit-article.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.comment=function(article){var today=new Date,dd=today.getDate(),mm=today.getMonth()+1,yyyy=today.getFullYear();10>dd&&(dd="0"+dd),10>mm&&(mm="0"+mm),today=mm+"/"+dd+"/"+yyyy;var comments="no comments";article?(comments=article.comments,comments=comments+" - "+$scope.authentication.user.displayName+" - ",comments=comments+" ["+today+"] "+this.comments+"\r\n",article.$update(),$scope.comments=""):(comments=$scope.article.comments,comments=comments+" - "+$scope.authentication.user.displayName+" - ",comments=comments+" ["+today+"] "+this.comments+"\r\n",$scope.article.comments=comments,$scope.article.$update(function(){$location.path("articles/"+$scope.article._id+"/review")},function(errorResponse){$scope.error=errorResponse.data.message}),$scope.comments="")},$scope.approve=function(article){console.log("approving article"),article?(article.status="Approved",article.$update()):($scope.article.status="Approved",$scope.article.$update(function(){$location.path("articles/"+$scope.article._id)},function(errorResponse){$scope.error=errorResponse.data.message}))},$scope.reject=function(article){console.log("rejecting article"),article?(article.status="Rejected",article.$update()):($scope.article.status="Rejected",$scope.article.$update(function(){$location.path("articles/"+$scope.article._id)},function(errorResponse){$scope.error=errorResponse.data.message}))},$scope.alert=function(article){console.log("alerting author article needs revision"),article?(article.status="Waiting for Revision",article.$update()):($scope.article.status="Waiting for Revision",$scope.article.$update(function(){$location.path("articles/"+$scope.article._id)},function(errorResponse){$scope.error=errorResponse.data.message}))},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findForReview=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Art Contest",state:"artsubmissions",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","artsubmissions",{title:"List Artsubmissions",state:"artsubmissions.list"}),menuService.addSubMenuItem("topbar","artsubmissions",{title:"Create Artsubmission",state:"artsubmissions.create",roles:["user"]})}angular.module("artsubmissions").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("artsubmissions",{"abstract":!0,url:"/artsubmissions",template:"<ui-view/>"}).state("artsubmissions.list",{url:"",templateUrl:"modules/artsubmissions/client/views/list-artsubmissions.client.view.html",controller:"ArtsubmissionsListController",controllerAs:"vm",data:{pageTitle:"Artsubmissions List"}}).state("artsubmissions.create",{url:"/create",templateUrl:"modules/artsubmissions/client/views/form-artsubmission.client.view.html",controller:"ArtsubmissionsController",controllerAs:"vm",resolve:{artsubmissionResolve:newArtsubmission},data:{roles:["user","admin"],pageTitle:"Artsubmissions Create"}}).state("artsubmissions.edit",{url:"/:artsubmissionId/edit",templateUrl:"modules/artsubmissions/client/views/form-artsubmission.client.view.html",controller:"ArtsubmissionsController",controllerAs:"vm",resolve:{artsubmissionResolve:getArtsubmission},data:{roles:["user","admin"],pageTitle:"Edit Artsubmission {{ artsubmissionResolve.name }}"}}).state("artsubmissions.view",{url:"/:artsubmissionId",templateUrl:"modules/artsubmissions/client/views/view-artsubmission.client.view.html",controller:"ArtsubmissionsController",controllerAs:"vm",resolve:{artsubmissionResolve:getArtsubmission},data:{pageTitle:"Artsubmission {{ artsubmissionResolve.name }}"}})}function getArtsubmission($stateParams,ArtsubmissionsService){return ArtsubmissionsService.get({artsubmissionId:$stateParams.artsubmissionId}).$promise}function newArtsubmission(ArtsubmissionsService){return new ArtsubmissionsService}angular.module("artsubmissions").config(routeConfig),routeConfig.$inject=["$stateProvider"],getArtsubmission.$inject=["$stateParams","ArtsubmissionsService"],newArtsubmission.$inject=["ArtsubmissionsService"]}(),function(){function ArtsubmissionsController($scope,$state,$window,Authentication,artsubmission){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.artsubmission.$remove($state.go("artsubmissions.list"))}function save(isValid){function successCallback(res){$state.go("artsubmissions.view",{artsubmissionId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.artsubmission._id?vm.artsubmission.$update(successCallback,errorCallback):vm.artsubmission.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.artsubmissionForm"),!1)}var vm=this;vm.authentication=Authentication,vm.artsubmission=artsubmission,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("artsubmissions").controller("ArtsubmissionsController",ArtsubmissionsController),ArtsubmissionsController.$inject=["$scope","$state","$window","Authentication","artsubmissionResolve"]}(),function(){function ArtsubmissionsListController(ArtsubmissionsService){var vm=this;vm.artsubmissions=ArtsubmissionsService.query()}angular.module("artsubmissions").controller("ArtsubmissionsListController",ArtsubmissionsListController),ArtsubmissionsListController.$inject=["ArtsubmissionsService"]}(),function(){function ArtsubmissionsService($resource){return $resource("api/artsubmissions/:artsubmissionId",{artsubmissionId:"@_id"},{update:{method:"PUT"}})}angular.module("artsubmissions").factory("ArtsubmissionsService",ArtsubmissionsService),ArtsubmissionsService.$inject=["$resource"]}(),angular.module("chat").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Chat",state:"chat"})}]),angular.module("chat").config(["$stateProvider",function($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/client/views/chat.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket",function($scope,$location,Authentication,Socket){$scope.messages=[],Authentication.user||$location.path("/"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){$scope.messages.unshift(message)}),$scope.sendMessage=function(){var message={text:this.messageText};Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Contact",state:"contactus",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","contactus",{title:"List Contactus",state:"contactus.list"}),menuService.addSubMenuItem("topbar","contactus",{title:"Create Contactu",state:"contactus.create",roles:["user"]})}angular.module("contactus").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("contactus",{"abstract":!0,url:"/contactus",template:"<ui-view/>"}).state("contactus.list",{url:"",templateUrl:"modules/contactus/client/views/list-contactus.client.view.html",controller:"ContactusListController",controllerAs:"vm",data:{pageTitle:"Contactus List"}}).state("contactus.create",{url:"/create",templateUrl:"modules/contactus/client/views/form-contactu.client.view.html",controller:"ContactusController",controllerAs:"vm",resolve:{contactuResolve:newContactu},data:{roles:["user","admin"],pageTitle:"Contactus Create"}}).state("contactus.edit",{url:"/:contactuId/edit",templateUrl:"modules/contactus/client/views/form-contactu.client.view.html",controller:"ContactusController",controllerAs:"vm",resolve:{contactuResolve:getContactu},data:{roles:["user","admin"],pageTitle:"Edit Contactu {{ contactuResolve.name }}"}}).state("contactus.view",{url:"/:contactuId",templateUrl:"modules/contactus/client/views/view-contactu.client.view.html",controller:"ContactusController",controllerAs:"vm",resolve:{contactuResolve:getContactu},data:{pageTitle:"Contactu {{ contactuResolve.name }}"}})}function getContactu($stateParams,ContactusService){return ContactusService.get({contactuId:$stateParams.contactuId}).$promise}function newContactu(ContactusService){return new ContactusService}angular.module("contactus").config(routeConfig),routeConfig.$inject=["$stateProvider"],getContactu.$inject=["$stateParams","ContactusService"],newContactu.$inject=["ContactusService"]}(),function(){function ContactusController($scope,$state,$window,Authentication,contactu){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.contactu.$remove($state.go("contactus.list"))}function save(isValid){function successCallback(res){$state.go("contactus.view",{contactuId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.contactu._id?vm.contactu.$update(successCallback,errorCallback):vm.contactu.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.contactuForm"),!1)}var vm=this;vm.authentication=Authentication,vm.contactu=contactu,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("contactus").controller("ContactusController",ContactusController),ContactusController.$inject=["$scope","$state","$window","Authentication","contactuResolve"]}(),function(){function ContactusListController(ContactusService){var vm=this;vm.contactus=ContactusService.query()}angular.module("contactus").controller("ContactusListController",ContactusListController),ContactusListController.$inject=["ContactusService"]}(),function(){function ContactusService($resource){return $resource("api/contactus/:contactuId",{contactuId:"@_id"},{update:{method:"PUT"}})}angular.module("contactus").factory("ContactusService",ContactusService),ContactusService.$inject=["$resource"]}(),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Games",state:"games",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","games",{title:"List Games",state:"games.list"}),menuService.addSubMenuItem("topbar","games",{title:"Create Game",state:"games.create",roles:["user"]})}angular.module("games").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("games",{"abstract":!0,url:"/games",template:"<ui-view/>"}).state("games.list",{url:"",templateUrl:"modules/games/client/views/list-games.client.view.html",controller:"GamesListController",controllerAs:"vm",data:{pageTitle:"Games List"}}).state("games.create",{url:"/create",templateUrl:"modules/games/client/views/form-game.client.view.html",controller:"GamesController",controllerAs:"vm",resolve:{gameResolve:newGame},data:{roles:["admin"],pageTitle:"Games Create"}}).state("games.edit",{url:"/:gameId/edit",templateUrl:"modules/games/client/views/form-game.client.view.html",controller:"GamesController",controllerAs:"vm",resolve:{gameResolve:getGame},data:{roles:["admin"],pageTitle:"Edit Game {{ gameResolve.name }}"}}).state("games.view",{url:"/:gameId",templateUrl:"modules/games/client/views/view-game.client.view.html",controller:"GamesController",controllerAs:"vm",resolve:{gameResolve:getGame},data:{pageTitle:"Game {{ gameResolve.name }}"}})}function getGame($stateParams,GamesService){return GamesService.get({gameId:$stateParams.gameId}).$promise}function newGame(GamesService){return new GamesService}angular.module("games").config(routeConfig),routeConfig.$inject=["$stateProvider"],getGame.$inject=["$stateParams","GamesService"],newGame.$inject=["GamesService"]}(),function(){function GamesController($scope,$state,$window,Authentication,game){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.game.$remove($state.go("games.list"))}function save(isValid){function successCallback(res){$state.go("games.view",{gameId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.game._id?vm.game.$update(successCallback,errorCallback):vm.game.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.gameForm"),!1)}var vm=this;vm.authentication=Authentication,vm.game=game,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,void 0!==game.name&&(parseAnswers(vm),parseGameboard(vm),init()),$scope.gameTypes=["Wordsearch","Maze","Test"],$scope.dropDownChange=function(event){},$scope.clicked=function(event){var address=detectClickAddress(event.offsetX,event.offsetY);checkSelection(address);var foundString=getTextString();foundString.length>0&&checkStringIsAnswer(foundString),draw()}}function init(){canvas=document.getElementById("gameCanvas"),tile=canvas.getContext("2d"),draw()}function parseAnswers(vm){var answerList=vm.game.answerLine;answerList=answerList.replace(/\s+/g,""),answerList=answerList.split(","),answers=new Array(answerList.length);for(var i=0;i<answerList.length;i++)answers[i]={string:answerList[i],found:!1,selectionFirst:selectionOne,selectionSecond:selectionTwo}}function parseGameboard(vm){for(var i=0;i<gameboard.length;i++)gameboard[i]=new Array(15);parseGameboardLine(vm.game.line1,0),parseGameboardLine(vm.game.line2,1),parseGameboardLine(vm.game.line3,2),parseGameboardLine(vm.game.line4,3),parseGameboardLine(vm.game.line5,4),parseGameboardLine(vm.game.line6,5),parseGameboardLine(vm.game.line7,6),parseGameboardLine(vm.game.line8,7),parseGameboardLine(vm.game.line9,8),parseGameboardLine(vm.game.line10,9),parseGameboardLine(vm.game.line11,10),parseGameboardLine(vm.game.line12,11),parseGameboardLine(vm.game.line13,12),parseGameboardLine(vm.game.line14,13),parseGameboardLine(vm.game.line15,14)}function parseGameboardLine(line,boardj){line=line.replace(/\s+/g,""),line=line.replace(",",""),line=line.toUpperCase();for(var i=0;15>i;i++)if(line.length>=i){var gamePiece={letter:line[i],xCoord:0,yCoord:0,isSelected:!1};gameboard[i][boardj]=gamePiece}else{var rando=26*Math.random(),piece={letter:letters[Math.floor(rando)],xCoord:0,yCoord:0,isSelected:!1};gameboard[i][boardj]=piece}}function draw(){tile.clearRect(0,0,canvas.width,canvas.height),drawBoard(),drawAnswers(),drawSelection()}function drawSelection(){selectionOne.found&&(tile.beginPath(),tile.arc(25+32*selectionOne.xCoord,17+32*selectionOne.yCoord,12,0,2*Math.PI,!1),tile.strokeStyle="#FF0000",tile.stroke(),tile.closePath()),selectionTwo.found&&(tile.beginPath(),tile.arc(25+32*selectionTwo.xCoord,17+32*selectionTwo.yCoord,12,0,2*Math.PI,!1),tile.strokeStyle="#FF0000",tile.stroke(),tile.closePath(),tile.beginPath(),tile.strokeStyle="#FFFF00",tile.moveTo(25+32*selectionOne.xCoord,17+32*selectionOne.yCoord),tile.lineTo(25+32*selectionTwo.xCoord,17+32*selectionTwo.yCoord),tile.stroke(),tile.closePath())}function drawBoard(){for(var i=0;i<gameboard.length;i++)for(var j=0;j<gameboard.length;j++){var xCoord=15+32*i,yCoord=25+32*j;gameboard[i][j].xCoord=xCoord,gameboard[i][j].yCoord=yCoord,tile.beginPath(),tile.fillStyle="#000000",tile.font="24px serif",tile.fillText(gameboard[i][j].letter,xCoord,yCoord),tile.closePath()}}function drawAnswers(){tile.beginPath();for(var i=0;i<answers.length;i++)answers[i].found?tile.fillStyle="#FF0000":tile.fillStyle="#000000",tile.font="24px serif",6>i?tile.fillText(answers[i].string,25,524+28*i):12>i?tile.fillText(answers[i].string,205,524+28*(i-6)):tile.fillText(answers[i].string,375,524+28*(i-12));tile.closePath()}function checkSelection(address){var i=address.iAddress,j=address.jAddress;if(selectionOne.found&&selectionTwo.found&&(selectionOne.found=!1,selectionTwo.found=!1),selectionOne.found){if(address.found)if(selectionOne.xCoord===i&&selectionOne.yCoord===j||selectionTwo.found&&selectionTwo.xCoord===i&&selectionTwo.yCoord===j)selectionOne.found=!1,
selectionTwo.found=!1;else{var compatible=detectCompatibleSelection(address);compatible?(selectionTwo.xCoord=i,selectionTwo.yCoord=j,selectionTwo.letter=address.letter,selectionTwo.found=!0):(selectionOne.xCoord=i,selectionOne.yCoord=j,selectionOne.letter=address.letter,selectionOne.found=!0)}}else address.found&&(selectionOne.xCoord=i,selectionOne.yCoord=j,selectionOne.letter=address.letter,selectionOne.found=!0)}function checkStringIsAnswer(string){for(var reverseString="",i=string.length-1;i>=0;i--)reverseString+=string[i];reverseString=reverseString.toString().toLowerCase();for(var j=0;j<answers.length;j++){var stringTest=string.toString().toLowerCase(),answerTest=answers[j].string.toString().toLowerCase();(answerTest.valueOf()===stringTest.valueOf()||answerTest.valueOf()===reverseString.valueOf())&&(answers[j].found=!0,console.log("Found answer: "+answers[j].string))}}function getTextString(){var returnValue="";if(selectionOne.found&&selectionTwo.found)if(selectionOne.xCoord===selectionTwo.xCoord)if(selectionOne.yCoord>selectionTwo.yCoord)for(var i=selectionTwo.yCoord;i<=selectionOne.yCoord;i++)returnValue+=gameboard[selectionOne.xCoord][i].letter;else for(var j=selectionOne.yCoord;j<=selectionTwo.yCoord;j++)returnValue+=gameboard[selectionOne.xCoord][j].letter;else if(selectionOne.yCoord===selectionTwo.yCoord)if(selectionOne.xCoord>selectionTwo.xCoord)for(var k=selectionTwo.xCoord;k<=selectionOne.xCoord;k++)returnValue+=gameboard[k][selectionOne.yCoord].letter;else for(var l=selectionOne.xCoord;l<=selectionTwo.xCoord;l++)returnValue+=gameboard[l][selectionOne.yCoord].letter;else if(selectionOne.xCoord>selectionTwo.xCoord)if(selectionOne.yCoord>selectionTwo.yCoord)for(var m=selectionTwo.xCoord,n=selectionTwo.yCoord;m<=selectionOne.xCoord;m++,n++)returnValue+=gameboard[m][n].letter;else for(var o=selectionTwo.xCoord,p=selectionTwo.yCoord;o<=selectionOne.xCoord;o++,p--)returnValue+=gameboard[o][p].letter;else if(selectionTwo.yCoord>selectionOne.yCoord)for(var q=selectionOne.xCoord,r=selectionOne.yCoord;q<=selectionTwo.xCoord;q++,r++)returnValue+=gameboard[q][r].letter;else for(var s=selectionOne.xCoord,t=selectionOne.yCoord;s<=selectionTwo.xCoord;s++,t--)returnValue+=gameboard[s][t].letter;return returnValue}function detectCompatibleSelection(secondSel){var compatible=!1,i=secondSel.iAddress,j=secondSel.jAddress;(i===selectionOne.xCoord||j===selectionOne.yCoord)&&(compatible=!0);var xtest=Math.abs(i-selectionOne.xCoord),ytest=Math.abs(j-selectionOne.yCoord);return xtest===ytest&&(compatible=!0),compatible}function detectClickAddress(xClick,yClick){for(var address={found:!1,xCoord:0,yCoord:0,iAddress:0,jAddress:0},i=0;i<gameboard.length;i++)for(var j=0;j<gameboard.length;j++){var xCoord=gameboard[i][j].xCoord,yCoord=gameboard[i][j].yCoord,newx=Math.abs(xCoord-xClick+8),newy=Math.abs(yCoord-yClick-8),distance=Math.sqrt(newx*newx+newy*newy);12>=distance&&(address.found=!0,address.xCoord=xCoord,address.yCoord=yCoord,address.iAddress=i,address.jAddress=j)}return address}var canvas,tile,answers,selectionOne={selected:!1,xCoord:0,yCoord:0,letter:"A"},selectionTwo={selected:!1,xCoord:0,yCoord:0,letter:"A"},letters=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],gameboard=new Array(15);angular.module("games").controller("GamesController",GamesController),GamesController.$inject=["$scope","$state","$window","Authentication","gameResolve"]}(),function(){function GamesListController(GamesService){var vm=this;vm.games=GamesService.query()}angular.module("games").controller("GamesListController",GamesListController),GamesListController.$inject=["GamesService"]}(),function(){function GamesService($resource){return $resource("api/games/:gameId",{gameId:"@_id"},{update:{method:"PUT"}})}angular.module("games").factory("GamesService",GamesService),GamesService.$inject=["$resource"]}(),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Sponsors",state:"sponsors",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","sponsors",{title:"Our Sponsors",state:"sponsors.list"}),menuService.addSubMenuItem("topbar","sponsors",{title:"Become a Sponsor",state:"sponsors.create"}),menuService.addSubMenuItem("topbar","sponsors",{title:"Manage Site Advertisements",state:"sponsors.edit",roles:"admin"})}angular.module("sponsors").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("sponsors",{"abstract":!0,url:"/sponsors",template:"<ui-view/>"}).state("sponsors.list",{url:"",templateUrl:"modules/sponsors/client/views/list-sponsors.client.view.html",controller:"SponsorsListController",controllerAs:"vm",data:{pageTitle:"Sponsors List"}}).state("sponsors.create",{url:"/create",templateUrl:"modules/sponsors/client/views/form-sponsor.client.view.html",controller:"SponsorsController",controllerAs:"vm",resolve:{sponsorResolve:newSponsor},data:{roles:["user","admin"],pageTitle:"Sponsors Create"}}).state("sponsors.edit",{url:"/:sponsorId/edit",templateUrl:"modules/sponsors/client/views/form-sponsor.client.view.html",controller:"SponsorsController",controllerAs:"vm",resolve:{sponsorResolve:getSponsor},data:{roles:["user","admin"],pageTitle:"Edit Sponsor {{ sponsorResolve.name }}"}}).state("sponsors.view",{url:"/:sponsorId",templateUrl:"modules/sponsors/client/views/view-sponsor.client.view.html",controller:"SponsorsController",controllerAs:"vm",resolve:{sponsorResolve:getSponsor},data:{pageTitle:"Sponsor {{ sponsorResolve.name }}"}})}function getSponsor($stateParams,SponsorsService){return SponsorsService.get({sponsorId:$stateParams.sponsorId}).$promise}function newSponsor(SponsorsService){return new SponsorsService}angular.module("sponsors").config(routeConfig),routeConfig.$inject=["$stateProvider"],getSponsor.$inject=["$stateParams","SponsorsService"],newSponsor.$inject=["SponsorsService"]}(),function(){function SponsorsListController(SponsorsService){var vm=this;vm.sponsors=SponsorsService.query()}angular.module("sponsors").controller("SponsorsListController",SponsorsListController),SponsorsListController.$inject=["SponsorsService"]}(),function(){function SponsorsController($scope,$state,$window,Authentication,sponsor){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.sponsor.$remove($state.go("sponsors.list"))}function save(isValid){function successCallback(res){$state.go("sponsors.view",{sponsorId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.sponsor._id?vm.sponsor.$update(successCallback,errorCallback):vm.sponsor.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.sponsorForm"),!1)}var vm=this;vm.authentication=Authentication,vm.sponsor=sponsor,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,document.getElementById("uploadBtn").onchange=function(){document.getElementById("uploadFile").value=this.value}}angular.module("sponsors").controller("SponsorsController",SponsorsController),SponsorsController.$inject=["$scope","$state","$window","Authentication","sponsorResolve"]}(),function(){function SponsorsService($resource){return $resource("api/sponsors/:sponsorId",{sponsorId:"@_id"},{update:{method:"PUT"}})}angular.module("sponsors").factory("SponsorsService",SponsorsService),SponsorsService.$inject=["$resource"]}(),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Teachers",state:"teachers",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","teachers",{title:"List Teachers",state:"teachers.list"}),menuService.addSubMenuItem("topbar","teachers",{title:"Create Teacher",state:"teachers.create",roles:["user"]})}angular.module("teachers").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("teachers",{"abstract":!0,url:"/teachers",template:"<ui-view/>"}).state("teachers.list",{url:"",templateUrl:"modules/teachers/client/views/list-teachers.client.view.html",controller:"TeachersListController",controllerAs:"vm",data:{pageTitle:"Teachers List"}}).state("teachers.create",{url:"/create",templateUrl:"modules/teachers/client/views/form-teacher.client.view.html",controller:"TeachersController",controllerAs:"vm",resolve:{teacherResolve:newTeacher},data:{roles:["user","admin"],pageTitle:"Teachers Create"}}).state("teachers.edit",{url:"/:teacherId/edit",templateUrl:"modules/teachers/client/views/form-teacher.client.view.html",controller:"TeachersController",controllerAs:"vm",resolve:{teacherResolve:getTeacher},data:{roles:["user","admin"],pageTitle:"Edit Teacher {{ teacherResolve.name }}"}}).state("teachers.view",{url:"/:teacherId",templateUrl:"modules/teachers/client/views/view-teacher.client.view.html",controller:"TeachersController",controllerAs:"vm",resolve:{teacherResolve:getTeacher},data:{pageTitle:"Teacher {{ teacherResolve.name }}"}})}function getTeacher($stateParams,TeachersService){return TeachersService.get({teacherId:$stateParams.teacherId}).$promise}function newTeacher(TeachersService){return new TeachersService}angular.module("teachers").config(routeConfig),routeConfig.$inject=["$stateProvider"],getTeacher.$inject=["$stateParams","TeachersService"],newTeacher.$inject=["TeachersService"]}(),function(){function TeachersListController(TeachersService){var vm=this;vm.teachers=TeachersService.query()}angular.module("teachers").controller("TeachersListController",TeachersListController),TeachersListController.$inject=["TeachersService"]}(),function(){function TeachersController($scope,$state,$window,Authentication,teacher){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.teacher.$remove($state.go("teachers.list"))}function save(isValid){function successCallback(res){$state.go("teachers.view",{teacherId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.teacher._id?vm.teacher.$update(successCallback,errorCallback):vm.teacher.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.teacherForm"),!1)}var vm=this;vm.authentication=Authentication,vm.teacher=teacher,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("teachers").controller("TeachersController",TeachersController),TeachersController.$inject=["$scope","$state","$window","Authentication","teacherResolve"]}(),function(){function TeachersService($resource){return $resource("api/teachers/:teacherId",{teacherId:"@_id"},{update:{method:"PUT"}})}angular.module("teachers").factory("TeachersService",TeachersService),TeachersService.$inject=["$resource"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);